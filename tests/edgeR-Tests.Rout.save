
R version 2.13.0 Patched (2011-04-25 r55638)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(edgeR)
> 
> set.seed(0); u <- runif(100)
> 
> # generate raw counts from NB, create list object
> y <- matrix(rnbinom(80,size=5,mu=10),nrow=20)
> y <- rbind(0,c(0,0,2,2),y)
> rownames(y) <- paste("Tag",1:nrow(y),sep=".")
> d <- DGEList(counts=y,group=rep(1:2,each=2),lib.size=1001:1004)
> 
> # estimate common dispersion and find differences in expression
> d <- estimateCommonDisp(d)
> d$common.dispersion
[1] 0.210292
> de <- exactTest(d)
Comparison of groups:  2 - 1 
> summary(de$table)
    logConc            logFC            p.value       
 Min.   :-50.016   Min.   :-1.7577   Min.   :0.01976  
 1st Qu.: -7.088   1st Qu.:-0.4922   1st Qu.:0.33120  
 Median : -6.887   Median : 0.2280   Median :0.56514  
 Mean   : -9.818   Mean   : 1.8656   Mean   :0.54504  
 3rd Qu.: -6.552   3rd Qu.: 0.5323   3rd Qu.:0.81052  
 Max.   : -5.804   Max.   :41.0452   Max.   :1.00000  
> topTags(de)
Comparison of groups: 2-1 
          logConc      logFC    P.Value       FDR
Tag.17  -6.760425  2.0751158 0.01975954 0.4347099
Tag.21  -7.091791 -1.7577397 0.06131012 0.6744114
Tag.6   -7.808390 -1.6811127 0.12446044 0.8982100
Tag.2  -29.493440 41.0452294 0.16331090 0.8982100
Tag.16  -6.688425  0.9447004 0.29050785 0.9655885
Tag.20  -6.448417  0.8637539 0.31736609 0.9655885
Tag.12  -5.803735  0.7130994 0.37271028 0.9655885
Tag.19  -6.980938 -0.8103825 0.40166354 0.9655885
Tag.3   -6.694062 -0.7395680 0.42139935 0.9655885
Tag.8   -7.565709 -0.8107246 0.47117217 0.9655885
> 
> # mglmOneWay
> design <- model.matrix(~group,data=d$samples)
> mglmOneWay(d[1:10,],design,dispersion=0.2)
$coefficients
        (Intercept)        group2
 [1,] -1.000000e+08  0.000000e+00
 [2,] -1.000000e+08  1.000000e+08
 [3,]  2.525729e+00 -5.108256e-01
 [4,]  2.525729e+00  1.484200e-01
 [5,]  2.140066e+00 -1.941560e-01
 [6,]  2.079442e+00 -1.163151e+00
 [7,]  2.014903e+00  2.363888e-01
 [8,]  1.945910e+00 -5.596158e-01
 [9,]  1.504077e+00  2.006707e-01
[10,]  2.302585e+00  2.623643e-01

$fitted.values
      [,1] [,2] [,3] [,4]
 [1,]  0.0  0.0  0.0  0.0
 [2,]  0.0  0.0  2.0  2.0
 [3,] 12.5 12.5  7.5  7.5
 [4,] 12.5 12.5 14.5 14.5
 [5,]  8.5  8.5  7.0  7.0
 [6,]  8.0  8.0  2.5  2.5
 [7,]  7.5  7.5  9.5  9.5
 [8,]  7.0  7.0  4.0  4.0
 [9,]  4.5  4.5  5.5  5.5
[10,] 10.0 10.0 13.0 13.0

> mglmOneWay(d[1:10,],design,dispersion=0)
$coefficients
        (Intercept)        group2
 [1,] -1.000000e+08  0.000000e+00
 [2,] -1.000000e+08  1.000000e+08
 [3,]  2.525729e+00 -5.108256e-01
 [4,]  2.525729e+00  1.484200e-01
 [5,]  2.140066e+00 -1.941560e-01
 [6,]  2.079442e+00 -1.163151e+00
 [7,]  2.014903e+00  2.363888e-01
 [8,]  1.945910e+00 -5.596158e-01
 [9,]  1.504077e+00  2.006707e-01
[10,]  2.302585e+00  2.623643e-01

$fitted.values
      [,1] [,2] [,3] [,4]
 [1,]  0.0  0.0  0.0  0.0
 [2,]  0.0  0.0  2.0  2.0
 [3,] 12.5 12.5  7.5  7.5
 [4,] 12.5 12.5 14.5 14.5
 [5,]  8.5  8.5  7.0  7.0
 [6,]  8.0  8.0  2.5  2.5
 [7,]  7.5  7.5  9.5  9.5
 [8,]  7.0  7.0  4.0  4.0
 [9,]  4.5  4.5  5.5  5.5
[10,] 10.0 10.0 13.0 13.0

> 
> fit <- glmFit(d,design)
> lrt <- glmLRT(d,fit,coef=2)
> topTags(lrt)
Coefficient:  group2 
         logConc         logFC        LR    P.Value       FDR
Tag.17 -4.446814  2.075116e+00 6.0485417 0.01391779 0.3058697
Tag.2  -6.910425  1.442695e+08 4.8400348 0.02780633 0.3058697
Tag.21 -4.740745 -1.757740e+00 4.0777825 0.04345065 0.3186381
Tag.6  -5.251712 -1.681113e+00 3.0078205 0.08286364 0.4557500
Tag.16 -4.583298  9.447004e-01 1.3477682 0.24566867 0.8276702
Tag.20 -4.425464  8.637539e-01 1.1890032 0.27553071 0.8276702
Tag.19 -4.799990 -8.103825e-01 0.9279152 0.33540526 0.8276702
Tag.12 -3.992555  7.130994e-01 0.9095513 0.34023349 0.8276702
Tag.3  -4.607548 -7.395680e-01 0.8300307 0.36226364 0.8276702
Tag.8  -5.205333 -8.107246e-01 0.7830377 0.37621371 0.8276702
> 
> example(glmFit)

glmFit> nlibs <- 3

glmFit> ntags <- 100

glmFit> dispersion.true <- 0.1

glmFit> # Make first transcript respond to covariate x
glmFit> x <- 0:2

glmFit> design <- model.matrix(~x)

glmFit> beta.true <- cbind(Beta1=2,Beta2=c(2,rep(0,ntags-1)))

glmFit> mu.true <- 2^(beta.true %*% t(design))

glmFit> # Generate count data
glmFit> y <- rnbinom(ntags*nlibs,mu=mu.true,size=1/dispersion.true)

glmFit> y <- matrix(y,ntags,nlibs)

glmFit> colnames(y) <- c("x0","x1","x2")

glmFit> rownames(y) <- paste("Gene",1:ntags,sep="")

glmFit> d <- DGEList(y)
Calculating library sizes from column totals.

glmFit> # Normalize
glmFit> d <- calcNormFactors(d)

glmFit> # Fit the NB GLMs
glmFit> fit <- glmFit(d, design, dispersion=dispersion.true)

glmFit> ## Likelihood ratio tests for trend
glmFit> results <- glmLRT(d, fit, coef=2)

glmFit> topTags(results)
Coefficient:  x 
          logConc      logFC        LR      P.Value          FDR
Gene1   -2.834559  2.6735731 28.192832 1.098105e-07 1.098105e-05
Gene71  -4.536897  1.8613695  7.367477 6.641404e-03 3.320702e-01
Gene15  -4.615666  1.6138278  5.267609 2.172583e-02 7.241943e-01
Gene75  -4.705181  1.2683697  3.714271 5.394917e-02 8.759906e-01
Gene16  -5.157053  1.3989012  2.981689 8.421137e-02 8.759906e-01
Gene100 -4.210569  0.9643974  2.913948 8.781668e-02 8.759906e-01
Gene49  -4.803219 -1.1892653  2.879298 8.972514e-02 8.759906e-01
Gene42  -4.541616 -1.0388992  2.834035 9.228620e-02 8.759906e-01
Gene56  -4.541616 -1.0388992  2.834035 9.228620e-02 8.759906e-01
Gene62  -4.542761 -0.9670153  2.640892 1.041450e-01 8.759906e-01
> 
> # example using exactTest.matrix directly
> y <- matrix(rnbinom(20,mu=10,size=1.5),nrow=5)
> group <- factor(c(1,1,2,2))
> y <- splitIntoGroupsPseudo(y,group,pair=c(1,2))
> mus <- rep(10,5)
> f <- exactTest.matrix(y$y1,y$y2,mus,r=1.5,all.zeros=rep(FALSE,length=nrow(y$y1)))
> f
[1] 0.7156777 0.9351131 0.9645848 0.6754741 0.1309771
> 
