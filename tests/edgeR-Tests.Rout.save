
R version 2.15.0 (2012-03-30)
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(edgeR)
Loading required package: limma
> 
> set.seed(0); u <- runif(100)
> 
> # generate raw counts from NB, create list object
> y <- matrix(rnbinom(80,size=5,mu=10),nrow=20)
> y <- rbind(0,c(0,0,2,2),y)
> rownames(y) <- paste("Tag",1:nrow(y),sep=".")
> d <- DGEList(counts=y,group=rep(1:2,each=2),lib.size=1001:1004)
> 
> # estimate common dispersion and find differences in expression
> d <- estimateCommonDisp(d)
> d$common.dispersion
[1] 0.210292
> de <- exactTest(d)
> summary(de$table)
     logFC             logCPM         PValue       
 Min.   :-1.7266   Min.   :-Inf   Min.   :0.01976  
 1st Qu.:-0.4859   1st Qu.:  13   1st Qu.:0.33120  
 Median : 0.2254   Median :  13   Median :0.56514  
 Mean   : 0.1878   Mean   :-Inf   Mean   :0.54504  
 3rd Qu.: 0.5261   3rd Qu.:  13   3rd Qu.:0.81052  
 Max.   : 4.0861   Max.   :  14   Max.   :1.00000  
> topTags(de)
Comparison of groups:  2-1 
            logFC    logCPM     PValue       FDR
Tag.17  2.0451046 13.516173 0.01975954 0.4347099
Tag.21 -1.7266116 13.092119 0.06131012 0.6744114
Tag.6  -1.6328379 12.354950 0.12446044 0.8982100
Tag.2   4.0861091  9.961932 0.16331090 0.8982100
Tag.16  0.9324546 13.319268 0.29050785 0.9655885
Tag.20  0.8544140 13.546974 0.31736609 0.9655885
Tag.12  0.7083448 14.171529 0.37271028 0.9655885
Tag.19 -0.7975130 13.006647 0.40166354 0.9655885
Tag.3  -0.7303145 13.284282 0.42139935 0.9655885
Tag.8  -0.7913052 12.421860 0.47117217 0.9655885
> 
> d <- estimateTagwiseDisp(d,trend="none")
> summary(d$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1757  0.1896  0.1989  0.2063  0.2185  0.2677 
> de <- exactTest(d,dispersion="common")
> topTags(de)
Comparison of groups:  2-1 
            logFC    logCPM     PValue       FDR
Tag.17  2.0451046 13.516173 0.01975954 0.4347099
Tag.21 -1.7266116 13.092119 0.06131012 0.6744114
Tag.6  -1.6328379 12.354950 0.12446044 0.8982100
Tag.2   4.0861091  9.961932 0.16331090 0.8982100
Tag.16  0.9324546 13.319268 0.29050785 0.9655885
Tag.20  0.8544140 13.546974 0.31736609 0.9655885
Tag.12  0.7083448 14.171529 0.37271028 0.9655885
Tag.19 -0.7975130 13.006647 0.40166354 0.9655885
Tag.3  -0.7303145 13.284282 0.42139935 0.9655885
Tag.8  -0.7913052 12.421860 0.47117217 0.9655885
> 
> de <- exactTest(d)
> topTags(de)
Comparison of groups:  2-1 
            logFC    logCPM     PValue       FDR
Tag.17  2.0451046 13.516205 0.01327001 0.2919403
Tag.21 -1.7266116 13.092106 0.05683886 0.6252275
Tag.6  -1.6328379 12.354928 0.11460208 0.8404152
Tag.2   4.0861091  9.961944 0.16126207 0.8869414
Tag.16  0.9324546 13.319276 0.28103256 0.9669238
Tag.20  0.8544140 13.546978 0.30234789 0.9669238
Tag.12  0.7083448 14.171528 0.37917895 0.9669238
Tag.19 -0.7975130 13.006648 0.40762735 0.9669238
Tag.3  -0.7303145 13.284277 0.40856822 0.9669238
Tag.8  -0.7913052 12.421877 0.49005179 0.9669238
> 
> d <- estimateTagwiseDisp(d,trend="movingave")
> summary(d$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.08593 0.16030 0.19870 0.20600 0.26070 0.34270 
> de <- exactTest(d)
> topTags(de)
Comparison of groups:  2-1 
            logFC    logCPM     PValue       FDR
Tag.17  2.0451046 13.516149 0.02682344 0.5315628
Tag.21 -1.7266116 13.092078 0.04832389 0.5315628
Tag.6  -1.6328379 12.354940 0.11987570 0.8790885
Tag.2   4.0861091  9.961857 0.17756221 0.9710137
Tag.16  0.9324546 13.319286 0.27081986 0.9710137
Tag.20  0.8544140 13.546966 0.35006702 0.9710137
Tag.19 -0.7975130 13.006638 0.35731405 0.9710137
Tag.3  -0.7303145 13.284279 0.41348640 0.9710137
Tag.12  0.7083448 14.171520 0.47009185 0.9710137
Tag.22  0.5755145 13.453717 0.50927109 0.9710137
> 
> summary(exactTest(d,rejection="smallp")$table$PValue)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.02682 0.35190 0.53020 0.54580 0.78530 1.00000 
> summary(exactTest(d,rejection="deviance")$table$PValue)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.02682 0.35190 0.53020 0.54580 0.78530 1.00000 
> 
> d2 <- estimateTagwiseDisp(d,trend="tricube")
> summary(d2$tagwise.dispersion)
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
0.003286 0.137100 0.200100 0.183800 0.242800 0.313800 
> de <- exactTest(d2)
> topTags(de)
Comparison of groups:  2-1 
            logFC    logCPM     PValue       FDR
Tag.21 -1.7266116 13.091891 0.01698446 0.2189219
Tag.17  2.0451046 13.516172 0.01990199 0.2189219
Tag.6  -1.6328379 12.354962 0.13038049 0.8984896
Tag.2   4.0861091  9.961932 0.16336174 0.8984896
Tag.16  0.9324546 13.319283 0.27329988 0.9709055
Tag.19 -0.7975130 13.006635 0.34166115 0.9709055
Tag.20  0.8544140 13.546968 0.34224492 0.9709055
Tag.3  -0.7303145 13.284256 0.35567817 0.9709055
Tag.12  0.7083448 14.171522 0.44087393 0.9709055
Tag.8  -0.7913052 12.421884 0.49795630 0.9709055
> 
> # mglmOneWay
> design <- model.matrix(~group,data=d$samples)
> mglmOneWay(d[1:10,],design,dispersion=0.2)
$coefficients
        (Intercept)        group2
 [1,] -1.000000e+08  0.000000e+00
 [2,] -1.000000e+08  1.000000e+08
 [3,]  2.525729e+00 -5.108256e-01
 [4,]  2.525729e+00  1.484200e-01
 [5,]  2.140066e+00 -1.941560e-01
 [6,]  2.079442e+00 -1.163151e+00
 [7,]  2.014903e+00  2.363888e-01
 [8,]  1.945910e+00 -5.596158e-01
 [9,]  1.504077e+00  2.006707e-01
[10,]  2.302585e+00  2.623643e-01

$fitted.values
      [,1] [,2] [,3] [,4]
 [1,]  0.0  0.0  0.0  0.0
 [2,]  0.0  0.0  2.0  2.0
 [3,] 12.5 12.5  7.5  7.5
 [4,] 12.5 12.5 14.5 14.5
 [5,]  8.5  8.5  7.0  7.0
 [6,]  8.0  8.0  2.5  2.5
 [7,]  7.5  7.5  9.5  9.5
 [8,]  7.0  7.0  4.0  4.0
 [9,]  4.5  4.5  5.5  5.5
[10,] 10.0 10.0 13.0 13.0

> mglmOneWay(d[1:10,],design,dispersion=0)
$coefficients
        (Intercept)        group2
 [1,] -1.000000e+08  0.000000e+00
 [2,] -1.000000e+08  1.000000e+08
 [3,]  2.525729e+00 -5.108256e-01
 [4,]  2.525729e+00  1.484200e-01
 [5,]  2.140066e+00 -1.941560e-01
 [6,]  2.079442e+00 -1.163151e+00
 [7,]  2.014903e+00  2.363888e-01
 [8,]  1.945910e+00 -5.596158e-01
 [9,]  1.504077e+00  2.006707e-01
[10,]  2.302585e+00  2.623643e-01

$fitted.values
      [,1] [,2] [,3] [,4]
 [1,]  0.0  0.0  0.0  0.0
 [2,]  0.0  0.0  2.0  2.0
 [3,] 12.5 12.5  7.5  7.5
 [4,] 12.5 12.5 14.5 14.5
 [5,]  8.5  8.5  7.0  7.0
 [6,]  8.0  8.0  2.5  2.5
 [7,]  7.5  7.5  9.5  9.5
 [8,]  7.0  7.0  4.0  4.0
 [9,]  4.5  4.5  5.5  5.5
[10,] 10.0 10.0 13.0 13.0

> 
> fit <- glmFit(d,design,dispersion=d$common.dispersion)
> lrt <- glmLRT(d,fit,coef=2)
> topTags(lrt)
Coefficient:  group2 
            logFC    logCPM        LR     PValue       FDR
Tag.17  2.0450964 13.516173 6.0485417 0.01391779 0.3058697
Tag.2   4.0861092  9.961932 4.8400348 0.02780633 0.3058697
Tag.21 -1.7265870 13.092119 4.0777825 0.04345065 0.3186381
Tag.6  -1.6329986 12.354950 3.0078205 0.08286364 0.4557500
Tag.16  0.9324996 13.319268 1.3477682 0.24566867 0.8276702
Tag.20  0.8543138 13.546974 1.1890032 0.27553071 0.8276702
Tag.19 -0.7976602 13.006647 0.9279152 0.33540526 0.8276702
Tag.12  0.7081170 14.171529 0.9095513 0.34023349 0.8276702
Tag.3  -0.7300410 13.284282 0.8300307 0.36226364 0.8276702
Tag.8  -0.7917906 12.421860 0.7830377 0.37621371 0.8276702
> 
> fit <- glmFit(d,design,dispersion=d$common.dispersion,prior.count.total=2)
> summary(fit$coef)
  (Intercept)         group2        
 Min.   :-7.603   Min.   :-1.13681  
 1st Qu.:-4.894   1st Qu.:-0.32341  
 Median :-4.712   Median : 0.15083  
 Mean   :-4.939   Mean   : 0.07817  
 3rd Qu.:-4.523   3rd Qu.: 0.35163  
 Max.   :-4.106   Max.   : 1.60864  
> 
> fit <- glmFit(d,design)
> lrt <- glmLRT(d,fit,coef=2)
> topTags(lrt)
Coefficient:  group2 
            logFC    logCPM        LR     PValue       FDR
Tag.17  2.0450944 13.516149 5.4810400 0.01922382 0.2456700
Tag.2   4.0861092  9.961857 4.6269899 0.03147273 0.2456700
Tag.21 -1.7265954 13.092078 4.5200192 0.03350046 0.2456700
Tag.6  -1.6329951 12.354940 3.0784570 0.07933576 0.4363467
Tag.16  0.9324952 13.319286 1.4583505 0.22719275 0.8319120
Tag.19 -0.7976364 13.006638 1.1100756 0.29206551 0.8319120
Tag.20  0.8543057 13.546966 1.0438808 0.30692061 0.8319120
Tag.3  -0.7300451 13.284279 0.8576498 0.35439721 0.8319120
Tag.8  -0.7918825 12.421907 0.6159918 0.43254068 0.8319120
Tag.12  0.7080896 14.171520 0.6071281 0.43587118 0.8319120
> 
> dglm <- estimateGLMCommonDisp(d,design)
> dglm$common.dispersion
[1] 0.2033282
> dglm <- estimateGLMTagwiseDisp(dglm,design)
> summary(dglm$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1756  0.1879  0.1998  0.2031  0.2135  0.2578 
> fit <- glmFit(dglm,design)
> lrt <- glmLRT(dglm,fit,coef=2)
> topTags(lrt)
Coefficient:  group2 
            logFC    logCPM        LR      PValue       FDR
Tag.17  2.0450988 13.516205 6.8001118 0.009115216 0.2005348
Tag.2   4.0861092  9.961939 4.8594096 0.027495744 0.2872068
Tag.21 -1.7265904 13.092103 4.2537154 0.039164558 0.2872068
Tag.6  -1.6329904 12.354926 3.1763761 0.074710253 0.4109064
Tag.16  0.9324970 13.319278 1.4126709 0.234613511 0.8499599
Tag.20  0.8543183 13.546979 1.2721097 0.259371274 0.8499599
Tag.19 -0.7976614 13.006647 0.9190392 0.337727380 0.8499599
Tag.12  0.7081163 14.171528 0.9014515 0.342392806 0.8499599
Tag.3  -0.7300488 13.284277 0.8817937 0.347710872 0.8499599
Tag.8  -0.7918166 12.421874 0.7356185 0.391068048 0.8603497
> dglm <- estimateGLMTrendedDisp(dglm,design)
> summary(dglm$trended.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
0.05079 0.17290 0.18430 0.18090 0.21150 0.26750 
> dglm <- estimateGLMTrendedDisp(dglm,design,method="power")
> summary(dglm$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1756  0.1879  0.1998  0.2031  0.2135  0.2578 
> dglm <- estimateGLMTrendedDisp(dglm,design,method="spline")
Loading required package: splines
> summary(dglm$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1756  0.1879  0.1998  0.2031  0.2135  0.2578 
> dglm <- estimateGLMTrendedDisp(dglm,design,method="bin.spline")
Warning messages:
1: In binGLMDispersion(y, design, min.n = min.n, offset = offset, method = method.bin,  :
  With 22 genes and setting the parameter minimum number (min.n) of genes per bin to 500,  there should technically be fewer than 2 bins. To make estimation of trended dispersions possible we set the number of bins to be 2.

2: In binGLMDispersion(y, design, min.n = min.n, offset = offset, method = method.bin,  :
  With 22 genes and setting the parameter minimum number (min.n) of genes per bin to 500,  there are only 2 bins. Using 2 bins here means that the minimum number of genes in each of the 2 bins is in fact 10. This number of bins and minimum number of genes per bin may not be sufficient for reliable estimation of a trend on the dispersions.

> summary(dglm$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.1756  0.1879  0.1998  0.2031  0.2135  0.2578 
> dglm <- estimateGLMTagwiseDisp(dglm,design)
Warning message:
In movingAverageByCol(apl[o, ], width = 1000) :
  reducing moving average width to nrow(x)
> summary(dglm$tagwise.dispersion)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 0.0475  0.1195  0.2201  0.3637  0.2745  2.1170 
> 
> example(glmFit)

glmFit> nlibs <- 3

glmFit> ntags <- 100

glmFit> dispersion.true <- 0.1

glmFit> # Make first transcript respond to covariate x
glmFit> x <- 0:2

glmFit> design <- model.matrix(~x)

glmFit> beta.true <- cbind(Beta1=2,Beta2=c(2,rep(0,ntags-1)))

glmFit> mu.true <- 2^(beta.true %*% t(design))

glmFit> # Generate count data
glmFit> y <- rnbinom(ntags*nlibs,mu=mu.true,size=1/dispersion.true)

glmFit> y <- matrix(y,ntags,nlibs)

glmFit> colnames(y) <- c("x0","x1","x2")

glmFit> rownames(y) <- paste("Gene",1:ntags,sep="")

glmFit> d <- DGEList(y)
Calculating library sizes from column totals.

glmFit> # Normalize
glmFit> d <- calcNormFactors(d)

glmFit> # Fit the NB GLMs
glmFit> fit <- glmFit(d, design, dispersion=dispersion.true)

glmFit> # Likelihood ratio tests for trend
glmFit> results <- glmLRT(d, fit, coef=2)

glmFit> topTags(results)
Coefficient:  x 
            logFC   logCPM        LR       PValue          FDR
Gene1   2.4897065 16.55426 34.704021 3.838380e-09 3.838380e-07
Gene25 -3.1722163 11.59510  7.428649 6.419352e-03 3.209676e-01
Gene10  1.6151500 13.30811  6.153048 1.311858e-02 4.372861e-01
Gene22 -1.3726514 13.04876  4.684651 3.043325e-02 7.608313e-01
Gene81 -1.3379144 13.06097  3.965916 4.643025e-02 8.688871e-01
Gene5   0.9660092 13.41096  2.819059 9.315101e-02 8.688871e-01
Gene37 -0.9816816 13.29612  2.789767 9.486804e-02 8.688871e-01
Gene34  0.9047568 13.40661  2.649492 1.035830e-01 8.688871e-01
Gene29 -1.0236470 12.91525  2.626186 1.051140e-01 8.688871e-01
Gene71 -0.8602972 13.68261  2.597055 1.070625e-01 8.688871e-01

glmFit> # Estimate the dispersion (may be unreliable with so few tags)
glmFit> d <- estimateGLMCommonDisp(d, design, verbose=TRUE)
Disp = 0.07571 , BCV = 0.2752 
> glmFit(d,design,dispersion=dispersion.true,method="simple")
Loading required package: MASS
An object of class "DGEGLM"
$coefficients
      (Intercept)         x
Gene1   -4.917586 1.7257330
Gene2   -4.553099 0.3321615
Gene3   -5.815420 0.7508669
Gene4   -4.629637 0.1960679
Gene5   -5.295320 0.6695865
95 more rows ...

$df.residual
[1] 1 1 1 1 1
95 more elements ...

$deviance
[1] 0.53374778 0.20168294 4.18933184 0.69542655 0.00796757
95 more elements ...

$design
  (Intercept) x
1           1 0
2           1 1
3           1 2
attr(,"assign")
[1] 0 1

$offset
         [,1]     [,2]     [,3]
[1,] 6.099264 6.016736 6.067465
[2,] 6.099264 6.016736 6.067465
[3,] 6.099264 6.016736 6.067465
[4,] 6.099264 6.016736 6.067465
[5,] 6.099264 6.016736 6.067465
95 more rows ...

$dispersion
[1] 0.1

$weights
     [,1] [,2] [,3]
[1,]    1    1    1
[2,]    1    1    1
[3,]    1    1    1
[4,]    1    1    1
[5,]    1    1    1
95 more rows ...

$fitted.values
            x0        x1        x2
Gene1 3.128139 16.522832 99.713904
Gene2 4.522520  5.858801  8.671811
Gene3 1.169705  2.402414  5.637571
Gene4 4.176401  4.709091  6.066590
Gene5 2.072117  3.834708  8.108175
95 more rows ...

$converged
[1] TRUE TRUE TRUE TRUE TRUE
95 more elements ...

$error
[1] FALSE FALSE FALSE FALSE FALSE
95 more elements ...

$abundance
    Gene1     Gene2     Gene3     Gene4     Gene5 
-2.340971 -4.213249 -4.957796 -4.454150 -4.519740 
95 more elements ...

$method
[1] "simple"

$counts
      x0 x1  x2
Gene1  4 13 107
Gene2  4  7   8
Gene3  0  5   4
Gene4  5  3   7
Gene5  2  4   8
95 more rows ...

$samples
   group lib.size norm.factors
x0     1      402    1.1082828
x1     1      384    1.0683263
x2     1      511    0.8445892

> glmFit(d,design,dispersion=dispersion.true,method="levenberg")
Loading required package: statmod
An object of class "DGEGLM"
$coefficients
      (Intercept)         x
Gene1   -4.917586 1.7257330
Gene2   -4.553099 0.3321615
Gene3   -5.815420 0.7508669
Gene4   -4.629637 0.1960679
Gene5   -5.295320 0.6695865
95 more rows ...

$deviance
[1] 0.53374778 0.20168294 4.18933184 0.69542655 0.00796757
95 more elements ...

$design
  (Intercept) x
1           1 0
2           1 1
3           1 2
attr(,"assign")
[1] 0 1

$offset
         [,1]     [,2]     [,3]
[1,] 6.099264 6.016736 6.067465
[2,] 6.099264 6.016736 6.067465
[3,] 6.099264 6.016736 6.067465
[4,] 6.099264 6.016736 6.067465
[5,] 6.099264 6.016736 6.067465
95 more rows ...

$dispersion
[1] 0.1 0.1 0.1 0.1 0.1
95 more elements ...

$fitted.values
            x0        x1        x2
Gene1 3.128147 16.522846 99.713802
Gene2 4.522480  5.858800  8.671883
Gene3 1.169671  2.402414  5.637736
Gene4 4.176397  4.709091  6.066597
Gene5 2.072114  3.834707  8.108180
95 more rows ...

$df.residual
[1] 1 1 1 1 1
95 more elements ...

$abundance
    Gene1     Gene2     Gene3     Gene4     Gene5 
-2.340971 -4.213249 -4.957796 -4.454150 -4.519740 
95 more elements ...

$method
[1] "levenberg"

$counts
      x0 x1  x2
Gene1  4 13 107
Gene2  4  7   8
Gene3  0  5   4
Gene4  5  3   7
Gene5  2  4   8
95 more rows ...

$samples
   group lib.size norm.factors
x0     1      402    1.1082828
x1     1      384    1.0683263
x2     1      511    0.8445892

> 
> y <- matrix(rnbinom(20,mu=10,size=3/2),nrow=5)
> group <- factor(c(1,1,2,2))
> ys <- splitIntoGroupsPseudo(y,group,pair=c(1,2))
> exactTestDoubleTail(ys$y1,ys$y2,dispersion=2/3)
[1] 0.4189923 0.4429949 0.7353656 0.5497263 0.8017048
> 
> y <- matrix(rnbinom(5*7,mu=10,size=3/2),nrow=5,ncol=7)
> group <- factor(c(1,1,2,2,3,3,3))
> ys <- splitIntoGroupsPseudo(y,group,pair=c(1,3))
> exactTestDoubleTail(ys$y1,ys$y2,dispersion=2/3)
[1] 0.5546390 0.3424727 0.7399625 0.4927107 0.3657264
> exactTestBetaApprox(ys$y1,ys$y2,dispersion=2/3)
[1] 0.5571358 0.3423395 0.7370448 0.4924267 0.3656123
> 
> y[1,3:4] <- 0
> design <- model.matrix(~group)
> fit <- glmFit(y,design,dispersion=2/3)
> summary(fit$coef)
  (Intercept)         group2            group3          
 Min.   :-2.085   Min.   :-4.1379   Min.   :-0.3686361  
 1st Qu.:-2.085   1st Qu.:-0.6382   1st Qu.:-0.1543458  
 Median :-1.557   Median : 0.1089   Median :-0.0034261  
 Mean   :-1.667   Mean   :-0.8212   Mean   : 0.0381174  
 3rd Qu.:-1.467   3rd Qu.: 0.1385   3rd Qu.:-0.0002776  
 Max.   :-1.141   Max.   : 0.4228   Max.   : 0.7172727  
> 
> 
> proc.time()
   user  system elapsed 
   5.47    0.03    5.56 
