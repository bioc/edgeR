
R version 2.13.0 Under development (unstable) (2011-03-05 r54672)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: i386-pc-mingw32/i386 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(edgeR)
> 
> set.seed(0); u <- runif(100)
> 
> #y <- matrix(rnbinom(2*4,mu=4,size=1.5),2,4)
> #lib.size <- rep(50000,4)
> #group <- c(1,1,2,2)
> 
> #d<-list(data=y,lib.size=lib.size,group=group)
> 
> 
> # generate raw counts from NB, create list object
> y<-matrix(rnbinom(80,size=5,mu=10),nrow=20)
> d<-DGEList(counts=y,group=rep(1:2,each=2),lib.size=rep(c(1000:1001),2))
> rownames(d$counts)<-paste("tagno",1:nrow(d$counts),sep=".")
> 
> # estimate common dispersion and find differences in expression
> d<-estimateCommonDisp(d)
> de<-exactTest(d)
Comparison of groups:  2 - 1 
> 
> # example using exactTest.matrix directly
> y<-matrix(rnbinom(20,mu=10,size=1.5),nrow=5)
> group<-factor(c(1,1,2,2))
> y<-splitIntoGroupsPseudo(y,group,pair=c(1,2))
> mus<-rep(10,5)
> f<-exactTest.matrix(y$y1,y$y2,mus,r=1.5,all.zeros=rep(FALSE,length=nrow(y$y1)))
> 
> # mglmOneWay
> design <- model.matrix(~group)
> mglmOneWay(d[1:10,],design,dispersion=0.2)
$coefficients
      (Intercept)     group2
 [1,]    2.525729 -0.5108256
 [2,]    2.525729  0.1484200
 [3,]    2.140066 -0.1941560
 [4,]    2.079442 -1.1631508
 [5,]    2.014903  0.2363888
 [6,]    1.945910 -0.5596158
 [7,]    1.504077  0.2006707
 [8,]    2.302585  0.2623643
 [9,]    2.772589 -0.2876821
[10,]    2.639057  0.4964369

$fitted.values
      [,1] [,2] [,3] [,4]
 [1,] 12.5 12.5  7.5  7.5
 [2,] 12.5 12.5 14.5 14.5
 [3,]  8.5  8.5  7.0  7.0
 [4,]  8.0  8.0  2.5  2.5
 [5,]  7.5  7.5  9.5  9.5
 [6,]  7.0  7.0  4.0  4.0
 [7,]  4.5  4.5  5.5  5.5
 [8,] 10.0 10.0 13.0 13.0
 [9,] 16.0 16.0 12.0 12.0
[10,] 14.0 14.0 23.0 23.0

> 
